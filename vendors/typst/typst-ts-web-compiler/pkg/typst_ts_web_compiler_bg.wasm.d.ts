/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function qcms_transform_data_rgb_out_lut_precache(a: number, b: number, c: number, d: number): void;
export function qcms_transform_data_rgba_out_lut_precache(a: number, b: number, c: number, d: number): void;
export function qcms_transform_data_bgra_out_lut_precache(a: number, b: number, c: number, d: number): void;
export function qcms_transform_data_rgb_out_lut(a: number, b: number, c: number, d: number): void;
export function qcms_transform_data_rgba_out_lut(a: number, b: number, c: number, d: number): void;
export function qcms_transform_data_bgra_out_lut(a: number, b: number, c: number, d: number): void;
export function qcms_transform_release(a: number): void;
export function qcms_profile_precache_output_transform(a: number): void;
export function qcms_enable_iccv4(): void;
export function qcms_profile_is_bogus(a: number): number;
export function qcms_white_point_sRGB(a: number): void;
export function lut_interp_linear16(a: number, b: number, c: number): number;
export function lut_inverse_interp16(a: number, b: number, c: number): number;
export function __wbg_proxycontext_free(a: number, b: number): void;
export function proxycontext_new(a: number): number;
export function proxycontext_context(a: number): number;
export function proxycontext_untar(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_typstcompiler_free(a: number, b: number): void;
export function get_font_info(a: number): number;
export function typstcompiler_reset(a: number, b: number): void;
export function typstcompiler_set_inputs(a: number, b: number, c: number): void;
export function typstcompiler_add_source(a: number, b: number, c: number, d: number, e: number): number;
export function typstcompiler_unmap_shadow(a: number, b: number, c: number): number;
export function typstcompiler_reset_shadow(a: number): void;
export function typstcompiler_get_loaded_fonts(a: number, b: number): void;
export function typstcompiler_get_ast(a: number, b: number, c: number, d: number): void;
export function typstcompiler_get_semantic_token_legend(a: number, b: number): void;
export function typstcompiler_get_semantic_tokens(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function typstcompiler_get_artifact(a: number, b: number, c: number, d: number, e: number): void;
export function typstcompiler_set_compiler_options(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function typstcompiler_query(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function typstcompiler_compile(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function typstcompiler_create_incr_server(a: number, b: number): void;
export function typstcompiler_incr_compile(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_typstcompilerbuilder_free(a: number, b: number): void;
export function typstcompilerbuilder_new(a: number): void;
export function typstcompilerbuilder_set_dummy_access_model(a: number, b: number): void;
export function typstcompilerbuilder_set_access_model(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function typstcompilerbuilder_set_package_registry(a: number, b: number, c: number): number;
export function typstcompilerbuilder_add_raw_font(a: number, b: number): number;
export function typstcompilerbuilder_add_web_fonts(a: number, b: number): number;
export function typstcompilerbuilder_add_glyph_pack(a: number, b: number): number;
export function typstcompilerbuilder_build(a: number): number;
export function __wbg_incrserver_free(a: number, b: number): void;
export function incrserver_set_attach_debug_info(a: number, b: number): void;
export function incrserver_current(a: number, b: number): void;
export function incrserver_reset(a: number): void;
export function typstcompiler_map_shadow(a: number, b: number, c: number, d: number, e: number): number;
export function __wbindgen_export_0(a: number, b: number): number;
export function __wbindgen_export_1(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_export_3(a: number, b: number, c: number): void;
export function __wbindgen_export_4(a: number, b: number, c: number): void;
export function __wbindgen_export_5(a: number): void;
export function __wbindgen_export_6(a: number, b: number, c: number, d: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
